// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/domain/ports.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "ratingtable/internal/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRatingRepo is a mock of RatingRepo interface.
type MockRatingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRatingRepoMockRecorder
}

// MockRatingRepoMockRecorder is the mock recorder for MockRatingRepo.
type MockRatingRepoMockRecorder struct {
	mock *MockRatingRepo
}

// NewMockRatingRepo creates a new mock instance.
func NewMockRatingRepo(ctrl *gomock.Controller) *MockRatingRepo {
	mock := &MockRatingRepo{ctrl: ctrl}
	mock.recorder = &MockRatingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingRepo) EXPECT() *MockRatingRepoMockRecorder {
	return m.recorder
}

// AddParty mocks base method.
func (m *MockRatingRepo) AddParty(party domain.Party) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParty", party)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddParty indicates an expected call of AddParty.
func (mr *MockRatingRepoMockRecorder) AddParty(party interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParty", reflect.TypeOf((*MockRatingRepo)(nil).AddParty), party)
}

// GetTeamRating mocks base method.
func (m *MockRatingRepo) GetTeamRating(team domain.Team) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamRating", team)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTeamRating indicates an expected call of GetTeamRating.
func (mr *MockRatingRepoMockRecorder) GetTeamRating(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamRating", reflect.TypeOf((*MockRatingRepo)(nil).GetTeamRating), team)
}

// RecalcTeamRating mocks base method.
func (m *MockRatingRepo) RecalcTeamRating(team domain.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecalcTeamRating", team)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecalcTeamRating indicates an expected call of RecalcTeamRating.
func (mr *MockRatingRepoMockRecorder) RecalcTeamRating(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecalcTeamRating", reflect.TypeOf((*MockRatingRepo)(nil).RecalcTeamRating), team)
}

// SaveTeamRatingChanges mocks base method.
func (m *MockRatingRepo) SaveTeamRatingChanges(arg0 []domain.TeamRatingChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTeamRatingChanges", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTeamRatingChanges indicates an expected call of SaveTeamRatingChanges.
func (mr *MockRatingRepoMockRecorder) SaveTeamRatingChanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTeamRatingChanges", reflect.TypeOf((*MockRatingRepo)(nil).SaveTeamRatingChanges), arg0)
}
